/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VirusSniper;

import javax.swing.*;
import java.io.*;

/**
 * For this project, we are going to focus on two types of backdoor binaries generated by MetaSploit:
 * payload/windows/shell/reverse_tcp
 * payload/windows/meterpreter/reverse_tcp
 *
 * The meterpreter binary is harder to detect, as each time one is generated the binary is different.
 * Can also detect xor encoded shell
 *
 *
 * Yara rules base: https://github.com/cuckoosandbox/community/blob/master/data/yara/shellcode/metasploit.yar
 */

public class MSFVenom {
    private static final char[] digits = "0123456789ABCDEF".toCharArray();
    private static final String yara_path = "yara64.exe";
    private static final String rule_file_path = "metasploit.yar";

    public MSFVenom(){
        final JFileChooser fc = new JFileChooser("exe/");
        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            System.out.println("Opening: " + file.getName() + ".");
            try {
                String sus = checkYara(file.getAbsolutePath());
                if(sus.equals(""))
                    JOptionPane.showMessageDialog(null, "Finished. No metasploit malware detected.", "", JOptionPane.PLAIN_MESSAGE);
                else {
                    JOptionPane.showMessageDialog(null, "Finished. Likely to be metasploit malware: \n" + sus, "", JOptionPane.PLAIN_MESSAGE);
                    new Report(Report.ReportType.MSFVENOM, "Likely to be metasploit malware: \n" + sus, file);
                }
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Failed to use Yar");
            }
        } else {
            System.out.println("Open command cancelled by user.");
        }
    }

    public static String checkYara(String binary_file_path) throws IOException {
        Process process = Runtime.getRuntime().exec(yara_path+" "+rule_file_path+" "+binary_file_path);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line = "";
        String result = "";
        while ((line = reader.readLine()) != null) {
            result += "\t- "+ line.split(" ")[0] +"\n";
        }
        if(!result.equals(""))
            result = result.substring(0, result.length()-1);
        return result;
    }
}